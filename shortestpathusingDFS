class Solution {
public:
    void recur(int r, int c,vector<vector<int>>& grid, int& answer, int count, vector<vector<int>>& visited, vector<vector<int>>& val){
        if(r<0 || c<0 || r>=grid.size() || c>=grid[0].size()){
            return;
        }
        if(grid[r][c]==1 ){
            return;
        }
        if(visited[r][c] == 1 && count>= val[r][c]){
            return;
        }
        visited[r][c] = 1;
        val[r][c] = count;
        if(r == grid.size()-1 && c == grid[0].size()-1 && answer>count){
            answer = count;
            return;
        }
        recur(r+1,c,grid,answer,count+1,visited,val); // down
        recur(r,c+1,grid,answer,count+1,visited,val); // right
        recur(r+1,c+1,grid,answer,count+1,visited,val); //down-right
        recur(r-1,c-1,grid,answer,count+1,visited,val); // up-left
        recur(r-1,c+1,grid,answer,count+1,visited,val); // up-right
        recur(r-1,c,grid,answer,count+1,visited,val); // up
        recur(r,c-1,grid,answer,count+1,visited,val); // left
        recur(r+1,c-1,grid,answer,count+1,visited,val); // down -left
        return;
        
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int answer=INT_MAX;
        vector<vector<int>> visited,val;
        for(int i=0;i<grid.size();i++){
            vector<int> dummy,dummy1;
            for(int j=0;j<grid[0].size();j++){
                dummy.push_back(0);
                dummy1.push_back(INT_MAX);
            }
            visited.push_back(dummy);
            val.push_back(dummy1);
        }
        recur(0,0,grid,answer,1,visited, val);
        if(answer==INT_MAX){
            answer = -1;
        }
        return answer;
    }
};
